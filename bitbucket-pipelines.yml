options:
  #max-time: 5 # minutes
  docker: true

pipelines:
  custom:
    upgrade-proxy-to-test:
      - step:
          image: gcr.io/google.com/cloudsdktool/cloud-sdk:334.0.0
          name: Deploy to GCP
          deployment: test
          caches:
            - docker
          name: Main script
          script:
            # SETUP
            - export IMAGE_NAME=us.gcr.io/$GCLOUD_PROJECT/$BITBUCKET_REPO_SLUG:$BITBUCKET_COMMIT
            - echo $GCLOUD_API_KEYFILE | base64 -d > ~/.gcloud-api-key.json
            - gcloud auth activate-service-account --key-file ~/.gcloud-api-key.json
            - gcloud config set project $GCLOUD_PROJECT
            - gcloud auth configure-docker --quiet
            - gcloud container clusters get-credentials $GCLOUD_CLUSTER_TEST --zone=$GCLOUD_ZONE_TEST --project $GCLOUD_PROJECT
            # BUILD IMAGE
            - printenv > .env
            - cat .env
            - echo dns_cloudflare_api_token = $CLOUDFLARE_TOKEN > letsencrypt/cloudflare.ini
            - docker build . -t $IMAGE_NAME
            # PUBLISH IMAGE
            - docker push $IMAGE_NAME
            # DEPLOYMENT
            - echo dns_cloudflare_api_token = $CLOUDFLARE_TOKEN > letsencrypt/cloudflare.ini
            - kubectl set image cronjob $BITBUCKET_REPO_SLUG $BITBUCKET_REPO_SLUG=$IMAGE_NAME --record

  branches:
    master:
      - step:
          image: gcr.io/google.com/cloudsdktool/cloud-sdk:334.0.0
          name: Deploy to GCP
          deployment: production
          caches:
            - docker
          script:
            # SETUP
            - export IMAGE_NAME=us.gcr.io/$GCLOUD_PROJECT/$BITBUCKET_REPO_SLUG:$BITBUCKET_COMMIT
            - echo $GCLOUD_API_KEYFILE | base64 -d > ~/.gcloud-api-key.json
            - gcloud auth activate-service-account --key-file ~/.gcloud-api-key.json
            - gcloud config set project $GCLOUD_PROJECT
            - gcloud auth configure-docker --quiet
            - gcloud container clusters get-credentials $GCLOUD_CLUSTER_PROD --zone=$GCLOUD_ZONE_PROD --project $GCLOUD_PROJECT
            # BUILD IMAGE
            - printenv > .env
            - cat .env
            - echo dns_cloudflare_api_token = $CLOUDFLARE_TOKEN > letsencrypt/cloudflare.ini
            - docker build . -t $IMAGE_NAME
            # PUBLISH IMAGE
            - docker push $IMAGE_NAME
            # DEPLOYMENT
            - kubectl set image cronjob $BITBUCKET_REPO_SLUG $BITBUCKET_REPO_SLUG=$IMAGE_NAME --record
